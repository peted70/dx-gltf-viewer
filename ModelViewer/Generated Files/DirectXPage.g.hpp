//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#include "DirectXPage.xaml.h"

void ::ModelViewer::DirectXPage::InitializeComponent()
{
    if (_contentLoaded)
    {
        return;
    }
    _contentLoaded = true;
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"ms-appx:///DirectXPage.xaml");
    ::Windows::UI::Xaml::Application::LoadComponent(this, resourceLocator, ::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation::Application);
}


/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class ModelViewer::DirectXPage::DirectXPage_obj1_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::ModelViewer::DirectXPage, ::XamlBindingInfo::XamlBindingTrackingBase>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
            ::Windows::UI::Xaml::ResourceDictionary^ localResources;
            ::Platform::WeakReference converterLookupRoot;
public:
    DirectXPage_obj1_Bindings()
    {
        InitializeTracking(this);
    }

private:
    ~DirectXPage_obj1_Bindings()
    {
        ReleaseAllListeners();
    }

public:

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 7: // DirectXPage.xaml line 256
                this->obj7 = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
                this->obj7->LostFocus += ref new ::Windows::UI::Xaml::RoutedEventHandler(
                        [this] (::Platform::Object^ sender, ::Windows::UI::Xaml::RoutedEventArgs^ e)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->SelectedTransform->ScaleZ = safe_cast<::default::float32>(this->LookupConverter("dpConverter")->ConvertBack(this->obj7->Text, ::default::float32::typeid, nullptr, nullptr));
                            }
                        });
                break;
            case 8: // DirectXPage.xaml line 251
                this->obj8 = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
                this->obj8->LostFocus += ref new ::Windows::UI::Xaml::RoutedEventHandler(
                        [this] (::Platform::Object^ sender, ::Windows::UI::Xaml::RoutedEventArgs^ e)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->SelectedTransform->ScaleY = safe_cast<::default::float32>(this->LookupConverter("dpConverter")->ConvertBack(this->obj8->Text, ::default::float32::typeid, nullptr, nullptr));
                            }
                        });
                break;
            case 9: // DirectXPage.xaml line 246
                this->obj9 = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
                this->obj9->LostFocus += ref new ::Windows::UI::Xaml::RoutedEventHandler(
                        [this] (::Platform::Object^ sender, ::Windows::UI::Xaml::RoutedEventArgs^ e)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->SelectedTransform->ScaleX = safe_cast<::default::float32>(this->LookupConverter("dpConverter")->ConvertBack(this->obj9->Text, ::default::float32::typeid, nullptr, nullptr));
                            }
                        });
                break;
            case 10: // DirectXPage.xaml line 232
                this->obj10 = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
                this->obj10->LostFocus += ref new ::Windows::UI::Xaml::RoutedEventHandler(
                        [this] (::Platform::Object^ sender, ::Windows::UI::Xaml::RoutedEventArgs^ e)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->SelectedTransform->RotationZ = safe_cast<::default::float32>(this->LookupConverter("dpConverter")->ConvertBack(this->obj10->Text, ::default::float32::typeid, nullptr, nullptr));
                            }
                        });
                break;
            case 11: // DirectXPage.xaml line 227
                this->obj11 = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
                this->obj11->LostFocus += ref new ::Windows::UI::Xaml::RoutedEventHandler(
                        [this] (::Platform::Object^ sender, ::Windows::UI::Xaml::RoutedEventArgs^ e)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->SelectedTransform->RotationY = safe_cast<::default::float32>(this->LookupConverter("dpConverter")->ConvertBack(this->obj11->Text, ::default::float32::typeid, nullptr, nullptr));
                            }
                        });
                break;
            case 12: // DirectXPage.xaml line 222
                this->obj12 = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
                this->obj12->LostFocus += ref new ::Windows::UI::Xaml::RoutedEventHandler(
                        [this] (::Platform::Object^ sender, ::Windows::UI::Xaml::RoutedEventArgs^ e)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->SelectedTransform->RotationX = safe_cast<::default::float32>(this->LookupConverter("dpConverter")->ConvertBack(this->obj12->Text, ::default::float32::typeid, nullptr, nullptr));
                            }
                        });
                break;
            case 13: // DirectXPage.xaml line 208
                this->obj13 = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
                this->obj13->LostFocus += ref new ::Windows::UI::Xaml::RoutedEventHandler(
                        [this] (::Platform::Object^ sender, ::Windows::UI::Xaml::RoutedEventArgs^ e)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->SelectedTransform->PositionZ = safe_cast<::default::float32>(this->LookupConverter("dpConverter")->ConvertBack(this->obj13->Text, ::default::float32::typeid, nullptr, nullptr));
                            }
                        });
                break;
            case 14: // DirectXPage.xaml line 203
                this->obj14 = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
                this->obj14->LostFocus += ref new ::Windows::UI::Xaml::RoutedEventHandler(
                        [this] (::Platform::Object^ sender, ::Windows::UI::Xaml::RoutedEventArgs^ e)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->SelectedTransform->PositionY = safe_cast<::default::float32>(this->LookupConverter("dpConverter")->ConvertBack(this->obj14->Text, ::default::float32::typeid, nullptr, nullptr));
                            }
                        });
                break;
            case 15: // DirectXPage.xaml line 198
                this->obj15 = safe_cast<::Windows::UI::Xaml::Controls::TextBox^>(__target);
                this->obj15->LostFocus += ref new ::Windows::UI::Xaml::RoutedEventHandler(
                        [this] (::Platform::Object^ sender, ::Windows::UI::Xaml::RoutedEventArgs^ e)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->SelectedTransform->PositionX = safe_cast<::default::float32>(this->LookupConverter("dpConverter")->ConvertBack(this->obj15->Text, ::default::float32::typeid, nullptr, nullptr));
                            }
                        });
                break;
            case 16: // DirectXPage.xaml line 139
                this->obj16 = safe_cast<::Windows::UI::Xaml::Controls::Slider^>(__target);
                this->obj16->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::RangeBase::ValueProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->LightScale = safe_cast<::default::float32>(this->obj16->Value);
                            }
                        }));
                break;
            case 17: // DirectXPage.xaml line 141
                this->obj17 = safe_cast<::Windows::UI::Xaml::Controls::Slider^>(__target);
                this->obj17->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::RangeBase::ValueProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->LightRotation = safe_cast<::default::float32>(this->obj17->Value);
                            }
                        }));
                break;
            case 18: // DirectXPage.xaml line 143
                this->obj18 = safe_cast<::Windows::UI::Xaml::Controls::Slider^>(__target);
                this->obj18->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::RangeBase::ValueProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->LightPitch = safe_cast<::default::float32>(this->obj18->Value);
                            }
                        }));
                break;
            case 19: // DirectXPage.xaml line 145
                this->obj19 = safe_cast<::Windows::UI::Xaml::Controls::Slider^>(__target);
                this->obj19->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::RangeBase::ValueProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->Ibl = safe_cast<::default::float32>(this->obj19->Value);
                            }
                        }));
                break;
            case 20: // DirectXPage.xaml line 160
                this->obj20 = safe_cast<::Windows::UI::Xaml::Controls::CheckBox^>(__target);
                this->obj20->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->BaseColour = this->obj20->IsChecked ? this->obj20->IsChecked->Value : false;
                            }
                        }));
                break;
            case 21: // DirectXPage.xaml line 162
                this->obj21 = safe_cast<::Windows::UI::Xaml::Controls::CheckBox^>(__target);
                this->obj21->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->Metallic = this->obj21->IsChecked ? this->obj21->IsChecked->Value : false;
                            }
                        }));
                break;
            case 22: // DirectXPage.xaml line 164
                this->obj22 = safe_cast<::Windows::UI::Xaml::Controls::CheckBox^>(__target);
                this->obj22->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->Roughness = this->obj22->IsChecked ? this->obj22->IsChecked->Value : false;
                            }
                        }));
                break;
            case 23: // DirectXPage.xaml line 167
                this->obj23 = safe_cast<::Windows::UI::Xaml::Controls::CheckBox^>(__target);
                this->obj23->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->Diffuse = this->obj23->IsChecked ? this->obj23->IsChecked->Value : false;
                            }
                        }));
                break;
            case 24: // DirectXPage.xaml line 169
                this->obj24 = safe_cast<::Windows::UI::Xaml::Controls::CheckBox^>(__target);
                this->obj24->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->Specular = this->obj24->IsChecked ? this->obj24->IsChecked->Value : false;
                            }
                        }));
                break;
            case 25: // DirectXPage.xaml line 171
                this->obj25 = safe_cast<::Windows::UI::Xaml::Controls::CheckBox^>(__target);
                this->obj25->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->F = this->obj25->IsChecked ? this->obj25->IsChecked->Value : false;
                            }
                        }));
                break;
            case 26: // DirectXPage.xaml line 173
                this->obj26 = safe_cast<::Windows::UI::Xaml::Controls::CheckBox^>(__target);
                this->obj26->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->G = this->obj26->IsChecked ? this->obj26->IsChecked->Value : false;
                            }
                        }));
                break;
            case 27: // DirectXPage.xaml line 175
                this->obj27 = safe_cast<::Windows::UI::Xaml::Controls::CheckBox^>(__target);
                this->obj27->RegisterPropertyChangedCallback(::Windows::UI::Xaml::Controls::Primitives::ToggleButton::IsCheckedProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->ViewModel->D = this->obj27->IsChecked ? this->obj27->IsChecked->Value : false;
                            }
                        }));
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void SetConverterLookupRoot(::Windows::UI::Xaml::FrameworkElement^ rootElement)
    {
        this->converterLookupRoot = rootElement;
    }

    ::Windows::UI::Xaml::Data::IValueConverter^ LookupConverter(::Platform::String^ key)
    {
        if (this->localResources == nullptr)
        {
            this->localResources = this->converterLookupRoot.Resolve<::Windows::UI::Xaml::FrameworkElement>()->Resources;
            this->converterLookupRoot = nullptr;
            }
        return safe_cast<::Windows::UI::Xaml::Data::IValueConverter^>(this->localResources->HasKey(key) ? this->localResources->Lookup(key) : ::Windows::UI::Xaml::Application::Current->Resources->Lookup(key));
    }

private:
    // Fields for each control that has bindings.
    ::Windows::UI::Xaml::Controls::TextBox^ obj7;
    ::Windows::UI::Xaml::Controls::TextBox^ obj8;
    ::Windows::UI::Xaml::Controls::TextBox^ obj9;
    ::Windows::UI::Xaml::Controls::TextBox^ obj10;
    ::Windows::UI::Xaml::Controls::TextBox^ obj11;
    ::Windows::UI::Xaml::Controls::TextBox^ obj12;
    ::Windows::UI::Xaml::Controls::TextBox^ obj13;
    ::Windows::UI::Xaml::Controls::TextBox^ obj14;
    ::Windows::UI::Xaml::Controls::TextBox^ obj15;
    ::Windows::UI::Xaml::Controls::Slider^ obj16;
    ::Windows::UI::Xaml::Controls::Slider^ obj17;
    ::Windows::UI::Xaml::Controls::Slider^ obj18;
    ::Windows::UI::Xaml::Controls::Slider^ obj19;
    ::Windows::UI::Xaml::Controls::CheckBox^ obj20;
    ::Windows::UI::Xaml::Controls::CheckBox^ obj21;
    ::Windows::UI::Xaml::Controls::CheckBox^ obj22;
    ::Windows::UI::Xaml::Controls::CheckBox^ obj23;
    ::Windows::UI::Xaml::Controls::CheckBox^ obj24;
    ::Windows::UI::Xaml::Controls::CheckBox^ obj25;
    ::Windows::UI::Xaml::Controls::CheckBox^ obj26;
    ::Windows::UI::Xaml::Controls::CheckBox^ obj27;
    
    // Fields for binding tracking.
    ::Windows::UI::Xaml::Data::INotifyPropertyChanged^ cachePC_ViewModel = nullptr;
    ::Windows::UI::Xaml::Data::INotifyPropertyChanged^ cachePC_ViewModel_SelectedTransform = nullptr;
    ::Windows::Foundation::EventRegistrationToken tokenPC_ViewModel;
    ::Windows::Foundation::EventRegistrationToken tokenPC_ViewModel_SelectedTransform;

    // Update methods for each path node used in binding steps.
    void Update_(::ModelViewer::DirectXPage^ obj, int phase)
    {
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_ViewModel(obj->ViewModel, phase);
            }
        }
    }
    void Update_ViewModel(::ViewModels::DirectXPageViewModel^ obj, int phase)
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(obj, &this->cachePC_ViewModel, &tokenPC_ViewModel);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_ViewModel_SelectedTransform(obj->SelectedTransform, phase);
                this->Update_ViewModel_LightScale(obj->LightScale, phase);
                this->Update_ViewModel_LightRotation(obj->LightRotation, phase);
                this->Update_ViewModel_LightPitch(obj->LightPitch, phase);
                this->Update_ViewModel_Ibl(obj->Ibl, phase);
                this->Update_ViewModel_BaseColour(obj->BaseColour, phase);
                this->Update_ViewModel_Metallic(obj->Metallic, phase);
                this->Update_ViewModel_Roughness(obj->Roughness, phase);
                this->Update_ViewModel_Diffuse(obj->Diffuse, phase);
                this->Update_ViewModel_Specular(obj->Specular, phase);
                this->Update_ViewModel_F(obj->F, phase);
                this->Update_ViewModel_G(obj->G, phase);
                this->Update_ViewModel_D(obj->D, phase);
            }
        }
    }
    void Update_ViewModel_SelectedTransform(::ViewModels::TransformViewModel^ obj, int phase)
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(obj, &this->cachePC_ViewModel_SelectedTransform, &tokenPC_ViewModel_SelectedTransform);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_ViewModel_SelectedTransform_ScaleZ(obj->ScaleZ, phase);
                this->Update_ViewModel_SelectedTransform_ScaleY(obj->ScaleY, phase);
                this->Update_ViewModel_SelectedTransform_ScaleX(obj->ScaleX, phase);
                this->Update_ViewModel_SelectedTransform_RotationZ(obj->RotationZ, phase);
                this->Update_ViewModel_SelectedTransform_RotationY(obj->RotationY, phase);
                this->Update_ViewModel_SelectedTransform_RotationX(obj->RotationX, phase);
                this->Update_ViewModel_SelectedTransform_PositionZ(obj->PositionZ, phase);
                this->Update_ViewModel_SelectedTransform_PositionY(obj->PositionY, phase);
                this->Update_ViewModel_SelectedTransform_PositionX(obj->PositionX, phase);
            }
        }
    }
    void Update_ViewModel_SelectedTransform_ScaleZ(::default::float32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 256
            Set_Windows_UI_Xaml_Controls_TextBox_Text(this->obj7, safe_cast<::Platform::String^>(this->LookupConverter("dpConverter")->Convert(obj, ::Platform::String::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_ViewModel_SelectedTransform_ScaleY(::default::float32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 251
            Set_Windows_UI_Xaml_Controls_TextBox_Text(this->obj8, safe_cast<::Platform::String^>(this->LookupConverter("dpConverter")->Convert(obj, ::Platform::String::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_ViewModel_SelectedTransform_ScaleX(::default::float32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 246
            Set_Windows_UI_Xaml_Controls_TextBox_Text(this->obj9, safe_cast<::Platform::String^>(this->LookupConverter("dpConverter")->Convert(obj, ::Platform::String::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_ViewModel_SelectedTransform_RotationZ(::default::float32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 232
            Set_Windows_UI_Xaml_Controls_TextBox_Text(this->obj10, safe_cast<::Platform::String^>(this->LookupConverter("dpConverter")->Convert(obj, ::Platform::String::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_ViewModel_SelectedTransform_RotationY(::default::float32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 227
            Set_Windows_UI_Xaml_Controls_TextBox_Text(this->obj11, safe_cast<::Platform::String^>(this->LookupConverter("dpConverter")->Convert(obj, ::Platform::String::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_ViewModel_SelectedTransform_RotationX(::default::float32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 222
            Set_Windows_UI_Xaml_Controls_TextBox_Text(this->obj12, safe_cast<::Platform::String^>(this->LookupConverter("dpConverter")->Convert(obj, ::Platform::String::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_ViewModel_SelectedTransform_PositionZ(::default::float32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 208
            Set_Windows_UI_Xaml_Controls_TextBox_Text(this->obj13, safe_cast<::Platform::String^>(this->LookupConverter("dpConverter")->Convert(obj, ::Platform::String::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_ViewModel_SelectedTransform_PositionY(::default::float32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 203
            Set_Windows_UI_Xaml_Controls_TextBox_Text(this->obj14, safe_cast<::Platform::String^>(this->LookupConverter("dpConverter")->Convert(obj, ::Platform::String::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_ViewModel_SelectedTransform_PositionX(::default::float32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 198
            Set_Windows_UI_Xaml_Controls_TextBox_Text(this->obj15, safe_cast<::Platform::String^>(this->LookupConverter("dpConverter")->Convert(obj, ::Platform::String::typeid, nullptr, nullptr)), nullptr);
        }
    }
    void Update_ViewModel_LightScale(::default::float32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 139
            Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Value(this->obj16, obj);
        }
    }
    void Update_ViewModel_LightRotation(::default::float32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 141
            Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Value(this->obj17, obj);
        }
    }
    void Update_ViewModel_LightPitch(::default::float32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 143
            Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Value(this->obj18, obj);
        }
    }
    void Update_ViewModel_Ibl(::default::float32 obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 145
            Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Value(this->obj19, obj);
        }
    }
    void Update_ViewModel_BaseColour(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 160
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj20, obj, nullptr);
        }
    }
    void Update_ViewModel_Metallic(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 162
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj21, obj, nullptr);
        }
    }
    void Update_ViewModel_Roughness(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 164
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj22, obj, nullptr);
        }
    }
    void Update_ViewModel_Diffuse(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 167
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj23, obj, nullptr);
        }
    }
    void Update_ViewModel_Specular(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 169
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj24, obj, nullptr);
        }
    }
    void Update_ViewModel_F(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 171
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj25, obj, nullptr);
        }
    }
    void Update_ViewModel_G(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 173
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj26, obj, nullptr);
        }
    }
    void Update_ViewModel_D(::Platform::Boolean obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // DirectXPage.xaml line 175
            Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this->obj27, obj, nullptr);
        }
    }

    virtual void ReleaseAllListeners() override
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, &this->cachePC_ViewModel, &tokenPC_ViewModel);
        this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, &this->cachePC_ViewModel_SelectedTransform, &tokenPC_ViewModel_SelectedTransform);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        if (cachePC_ViewModel != nullptr && cachePC_ViewModel->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::ViewModels::DirectXPageViewModel^ obj = safe_cast<::ViewModels::DirectXPageViewModel^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_SelectedTransform(obj->SelectedTransform, DATA_CHANGED);
                    this->Update_ViewModel_LightScale(obj->LightScale, DATA_CHANGED);
                    this->Update_ViewModel_LightRotation(obj->LightRotation, DATA_CHANGED);
                    this->Update_ViewModel_LightPitch(obj->LightPitch, DATA_CHANGED);
                    this->Update_ViewModel_Ibl(obj->Ibl, DATA_CHANGED);
                    this->Update_ViewModel_BaseColour(obj->BaseColour, DATA_CHANGED);
                    this->Update_ViewModel_Metallic(obj->Metallic, DATA_CHANGED);
                    this->Update_ViewModel_Roughness(obj->Roughness, DATA_CHANGED);
                    this->Update_ViewModel_Diffuse(obj->Diffuse, DATA_CHANGED);
                    this->Update_ViewModel_Specular(obj->Specular, DATA_CHANGED);
                    this->Update_ViewModel_F(obj->F, DATA_CHANGED);
                    this->Update_ViewModel_G(obj->G, DATA_CHANGED);
                    this->Update_ViewModel_D(obj->D, DATA_CHANGED);
                }
            }
            else if (propName == "SelectedTransform")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_SelectedTransform(obj->SelectedTransform, DATA_CHANGED);
                }
            }
            else if (propName == "LightScale")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_LightScale(obj->LightScale, DATA_CHANGED);
                }
            }
            else if (propName == "LightRotation")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_LightRotation(obj->LightRotation, DATA_CHANGED);
                }
            }
            else if (propName == "LightPitch")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_LightPitch(obj->LightPitch, DATA_CHANGED);
                }
            }
            else if (propName == "Ibl")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_Ibl(obj->Ibl, DATA_CHANGED);
                }
            }
            else if (propName == "BaseColour")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_BaseColour(obj->BaseColour, DATA_CHANGED);
                }
            }
            else if (propName == "Metallic")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_Metallic(obj->Metallic, DATA_CHANGED);
                }
            }
            else if (propName == "Roughness")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_Roughness(obj->Roughness, DATA_CHANGED);
                }
            }
            else if (propName == "Diffuse")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_Diffuse(obj->Diffuse, DATA_CHANGED);
                }
            }
            else if (propName == "Specular")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_Specular(obj->Specular, DATA_CHANGED);
                }
            }
            else if (propName == "F")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_F(obj->F, DATA_CHANGED);
                }
            }
            else if (propName == "G")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_G(obj->G, DATA_CHANGED);
                }
            }
            else if (propName == "D")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_D(obj->D, DATA_CHANGED);
                }
            }
        }
        if (cachePC_ViewModel_SelectedTransform != nullptr && cachePC_ViewModel_SelectedTransform->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::ViewModels::TransformViewModel^ obj = safe_cast<::ViewModels::TransformViewModel^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_SelectedTransform_ScaleZ(obj->ScaleZ, DATA_CHANGED);
                    this->Update_ViewModel_SelectedTransform_ScaleY(obj->ScaleY, DATA_CHANGED);
                    this->Update_ViewModel_SelectedTransform_ScaleX(obj->ScaleX, DATA_CHANGED);
                    this->Update_ViewModel_SelectedTransform_RotationZ(obj->RotationZ, DATA_CHANGED);
                    this->Update_ViewModel_SelectedTransform_RotationY(obj->RotationY, DATA_CHANGED);
                    this->Update_ViewModel_SelectedTransform_RotationX(obj->RotationX, DATA_CHANGED);
                    this->Update_ViewModel_SelectedTransform_PositionZ(obj->PositionZ, DATA_CHANGED);
                    this->Update_ViewModel_SelectedTransform_PositionY(obj->PositionY, DATA_CHANGED);
                    this->Update_ViewModel_SelectedTransform_PositionX(obj->PositionX, DATA_CHANGED);
                }
            }
            else if (propName == "ScaleZ")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_SelectedTransform_ScaleZ(obj->ScaleZ, DATA_CHANGED);
                }
            }
            else if (propName == "ScaleY")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_SelectedTransform_ScaleY(obj->ScaleY, DATA_CHANGED);
                }
            }
            else if (propName == "ScaleX")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_SelectedTransform_ScaleX(obj->ScaleX, DATA_CHANGED);
                }
            }
            else if (propName == "RotationZ")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_SelectedTransform_RotationZ(obj->RotationZ, DATA_CHANGED);
                }
            }
            else if (propName == "RotationY")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_SelectedTransform_RotationY(obj->RotationY, DATA_CHANGED);
                }
            }
            else if (propName == "RotationX")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_SelectedTransform_RotationX(obj->RotationX, DATA_CHANGED);
                }
            }
            else if (propName == "PositionZ")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_SelectedTransform_PositionZ(obj->PositionZ, DATA_CHANGED);
                }
            }
            else if (propName == "PositionY")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_SelectedTransform_PositionY(obj->PositionY, DATA_CHANGED);
                }
            }
            else if (propName == "PositionX")
            {
                if (obj != nullptr)
                {
                    this->Update_ViewModel_SelectedTransform_PositionX(obj->PositionX, DATA_CHANGED);
                }
            }
        }
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
    }

    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
    {
    }

    void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
        }
    }
    static void Set_Windows_UI_Xaml_Controls_TextBox_Text(::Windows::UI::Xaml::Controls::TextBox^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
    static void Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Value(::Windows::UI::Xaml::Controls::Primitives::RangeBase^ obj, ::default::float64 value)
    {
        obj->Value = value;
    }
    static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(::Windows::UI::Xaml::Controls::Primitives::ToggleButton^ obj, ::Platform::IBox<::Platform::Boolean>^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::IBox<::Platform::Boolean>^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::IBox<::Platform::Boolean>::typeid, targetNullValue);
        }
        obj->IsChecked = value;
    }
};

void ::ModelViewer::DirectXPage::Connect(int __connectionId, ::Platform::Object^ __target)
{
    switch (__connectionId)
    {
    case 2:
        {
            this->myColorPicker = safe_cast<::Windows::UI::Xaml::Controls::ColorPicker^>(__target);
        }
        break;
    case 3:
        {
            ::Windows::UI::Xaml::Controls::Button^ element3 = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::Button^>(element3))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::ModelViewer::DirectXPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&DirectXPage::confirmColor_Click);
        }
        break;
    case 4:
        {
            ::Windows::UI::Xaml::Controls::Button^ element4 = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::Button^>(element4))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::ModelViewer::DirectXPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&DirectXPage::cancelColor_Click);
        }
        break;
    case 5:
        {
            this->swapChainPanel = safe_cast<::Windows::UI::Xaml::Controls::SwapChainPanel^>(__target);
        }
        break;
    case 6:
        {
            this->sampleTreeView = safe_cast<::TreeViewControl::TreeView^>(__target);
            (safe_cast<::TreeViewControl::TreeView^>(this->sampleTreeView))->ItemClick += ref new ::Windows::UI::Xaml::Controls::ItemClickEventHandler(this, (void (::ModelViewer::DirectXPage::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Controls::ItemClickEventArgs^))&DirectXPage::TreeView_ItemClick);
        }
        break;
    case 28:
        {
            this->colorPickerButton = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
        }
        break;
    }
    _contentLoaded = true;
}

::Windows::UI::Xaml::Markup::IComponentConnector^ ::ModelViewer::DirectXPage::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)
{
    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;
    switch (__connectionId)
    {
        case 1: // DirectXPage.xaml line 1
            {
                ::Windows::UI::Xaml::Controls::Page^ element1 = safe_cast<::Windows::UI::Xaml::Controls::Page^>(__target);
                DirectXPage_obj1_Bindings* objBindings = new DirectXPage_obj1_Bindings();
                objBindings->SetDataRoot(this);
                objBindings->SetConverterLookupRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                this->Bindings = bindings;
                element1->Loading += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^>(bindings, &::XamlBindingInfo::XamlBindings::Loading);
            }
            break;
    }
    return bindings;
}

#pragma warning(pop)


