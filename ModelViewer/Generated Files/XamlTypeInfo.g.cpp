//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "App.xaml.h"
#include "DirectXPage.xaml.h"
#include "RootPage.xaml.h"
#include "XamlBindingInfo.g.hpp"
#include "App.g.hpp"
#include "DirectXPage.g.hpp"
#include "RootPage.g.hpp"

template<typename T>
::Platform::Object^ ActivateType()
{
    return ref new T;
}

template<typename TInstance, typename TItem>
void CollectionAdd(::Platform::Object^ instance, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Append((TItem)item);
}

template<typename TInstance, typename TKey, typename TItem>
void DictionaryAdd(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Insert((TKey)key, (TItem)item);
}

template<typename T>
::Platform::Object^ FromStringConverter(::XamlTypeInfo::InfoProvider::XamlUserType^ userType, ::Platform::String^ input)
{
    return ref new ::Platform::Box<T>((T)userType->CreateEnumUIntFromString(input));
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_IndentMultiplier(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->IndentMultiplier);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_DecimalPlaces(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->DecimalPlaces);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_IsInverse(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->IsInverse);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Depth(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Depth);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_HasItems(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->HasItems);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_IsExpanded(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->IsExpanded);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Size(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Size);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_ScaleZ(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->ScaleZ);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_ScaleY(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->ScaleY);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_ScaleX(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->ScaleX);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_RotationZ(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->RotationZ);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_RotationY(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->RotationY);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_RotationX(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->RotationX);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_PositionZ(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->PositionZ);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_PositionY(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->PositionY);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_PositionX(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->PositionX);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_D(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->D);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_G(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->G);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_F(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->F);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Specular(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Specular);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Diffuse(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Diffuse);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Roughness(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Roughness);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Metallic(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Metallic);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_BaseColour(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->BaseColour);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_LightColour(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->LightColour);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_Ibl(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->Ibl);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_LightPitch(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->LightPitch);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_LightRotation(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->LightRotation);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_LightScale(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->LightScale);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_IsSelected(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->IsSelected);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_IsFolder(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->IsFolder);
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_ExpandedGlyph(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->ExpandedGlyph;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_CollapsedGlyph(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->CollapsedGlyph;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_RootNode(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->RootNode;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_ViewModel(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->ViewModel;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_ParentNode(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->ParentNode;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Data(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Data;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_SelectedTransform(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->SelectedTransform;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Name(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Name;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IndentMultiplier(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->IndentMultiplier = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_DecimalPlaces(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->DecimalPlaces = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsInverse(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->IsInverse = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsExpanded(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->IsExpanded = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_ScaleZ(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->ScaleZ = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_ScaleY(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->ScaleY = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_ScaleX(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->ScaleX = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_RotationZ(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->RotationZ = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_RotationY(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->RotationY = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_RotationX(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->RotationX = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_PositionZ(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->PositionZ = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_PositionY(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->PositionY = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_PositionX(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->PositionX = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_D(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->D = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_G(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->G = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_F(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->F = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_Specular(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Specular = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_Diffuse(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Diffuse = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_Roughness(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Roughness = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_Metallic(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Metallic = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_BaseColour(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->BaseColour = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_LightColour(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->LightColour = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_Ibl(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Ibl = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_LightPitch(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->LightPitch = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_LightRotation(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->LightRotation = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_LightScale(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->LightScale = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsSelected(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->IsSelected = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetValueTypeMember_IsFolder(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->IsFolder = safe_cast<::Platform::IBox<TValue>^>(value)->Value;
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_ExpandedGlyph(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->ExpandedGlyph = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_CollapsedGlyph(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->CollapsedGlyph = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_ViewModel(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->ViewModel = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_ParentNode(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->ParentNode = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Data(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Data = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_SelectedTransform(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->SelectedTransform = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Name(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Name = safe_cast<TValue^>(value);
}

enum TypeInfo_Flags
{
    TypeInfo_Flags_None                 = 0x00,
    TypeInfo_Flags_IsLocalType          = 0x01,
    TypeInfo_Flags_IsSystemType         = 0x02,
    TypeInfo_Flags_IsReturnTypeStub     = 0x04,
    TypeInfo_Flags_IsBindable           = 0x08,
    TypeInfo_Flags_IsMarkupExtension    = 0x10, 
};

struct TypeInfo
{
    PCWSTR  typeName;
    PCWSTR contentPropertyName;
    ::Platform::Object^ (*activator)();
    void (*collectionAdd)(::Platform::Object^, ::Platform::Object^);
    void (*dictionaryAdd)(::Platform::Object^, ::Platform::Object^, ::Platform::Object^);
    ::Platform::Object^ (*fromStringConverter)(::XamlTypeInfo::InfoProvider::XamlUserType^, ::Platform::String^);
    int     baseTypeIndex;
    int     firstMemberIndex;
    int     firstEnumValueIndex;
    int     createFromStringIndex;
    ::Windows::UI::Xaml::Interop::TypeKind kindofType;
    unsigned int flags;
};

const TypeInfo TypeInfos[] = 
{
    //   0
    L"Int32", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //   1
    L"Object", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //   2
    L"String", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //   3
    L"UInt32", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //   4
    L"Single", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //   5
    L"Boolean", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //   6
    L"Windows.UI.Color", L"",
    nullptr, nullptr, nullptr, nullptr,
    7, // System.ValueType
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsReturnTypeStub | TypeInfo_Flags_None,
    //   7
    L"System.ValueType", L"",
    nullptr, nullptr, nullptr, nullptr,
    1, // Object
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_None,
    //   8
    L"Common.BindableBase", L"",
    nullptr, nullptr, nullptr, nullptr,
    21, // Windows.UI.Xaml.DependencyObject
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    //   9
    L"Common.ViewModelBase", L"",
    nullptr, nullptr, nullptr, nullptr,
    8, // Common.BindableBase
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    //  10
    L"ModelViewer.RootPage", L"",
    &ActivateType<::ModelViewer::RootPage>, nullptr, nullptr, nullptr,
    18, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    //  11
    L"ModelViewer.DirectXPage", L"",
    &ActivateType<::ModelViewer::DirectXPage>, nullptr, nullptr, nullptr,
    18, // Windows.UI.Xaml.Controls.Page
    0, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_None,
    //  12
    L"TreeViewControl.TreeView", L"",
    &ActivateType<::TreeViewControl::TreeView>, nullptr, nullptr, nullptr,
    22, // Windows.UI.Xaml.Controls.ListView
    1, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_None,
    //  13
    L"TreeViewControl.TreeNode", L"",
    &ActivateType<::TreeViewControl::TreeNode>, nullptr, nullptr, nullptr,
    1, // Object
    2, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsBindable | TypeInfo_Flags_None,
    //  14
    L"ModelViewer.GraphNodeData", L"",
    nullptr, nullptr, nullptr, nullptr,
    1, // Object
    8, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_IsBindable | TypeInfo_Flags_None,
    //  15
    L"ModelViewer.GlyphConverter", L"",
    &ActivateType<::ModelViewer::GlyphConverter>, nullptr, nullptr, nullptr,
    1, // Object
    11, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_IsBindable | TypeInfo_Flags_None,
    //  16
    L"ViewModels.RootPageViewModel", L"",
    &ActivateType<::ViewModels::RootPageViewModel>, nullptr, nullptr, nullptr,
    9, // Common.ViewModelBase
    13, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_IsBindable | TypeInfo_Flags_None,
    //  17
    L"TreeViewControl.TreeViewItem", L"",
    &ActivateType<::TreeViewControl::TreeViewItem>, nullptr, nullptr, nullptr,
    26, // Windows.UI.Xaml.Controls.ListViewItem
    13, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsBindable | TypeInfo_Flags_None,
    //  18
    L"Windows.UI.Xaml.Controls.Page", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    13, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //  19
    L"ViewModels.TransformViewModel", L"",
    nullptr, nullptr, nullptr, nullptr,
    9, // Common.ViewModelBase
    13, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_IsBindable | TypeInfo_Flags_None,
    //  20
    L"ViewModels.DirectXPageViewModel", L"",
    &ActivateType<::ViewModels::DirectXPageViewModel>, nullptr, nullptr, nullptr,
    9, // Common.ViewModelBase
    22, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_IsBindable | TypeInfo_Flags_None,
    //  21
    L"Windows.UI.Xaml.DependencyObject", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    36, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //  22
    L"Windows.UI.Xaml.Controls.ListView", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    36, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //  23
    L"ModelViewer.DecimalPlacesConverter", L"",
    &ActivateType<::ModelViewer::DecimalPlacesConverter>, nullptr, nullptr, nullptr,
    1, // Object
    36, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_IsBindable | TypeInfo_Flags_None,
    //  24
    L"Windows.UI.Xaml.Controls.UserControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    37, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //  25
    L"Windows.UI.Xaml.Controls.ItemsControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    37, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //  26
    L"Windows.UI.Xaml.Controls.ListViewItem", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    37, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //  27
    L"Windows.UI.Xaml.Controls.ContentControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    37, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_IsSystemType | TypeInfo_Flags_None,
    //  28
    L"ModelViewer.BooleanToVisibilityConverter", L"",
    &ActivateType<::ModelViewer::BooleanToVisibilityConverter>, nullptr, nullptr, nullptr,
    1, // Object
    37, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_IsLocalType | TypeInfo_Flags_IsBindable | TypeInfo_Flags_None,
    //  29
    L"TreeViewControl.IntegerToIndentationConverter", L"",
    &ActivateType<::TreeViewControl::IntegerToIndentationConverter>, nullptr, nullptr, nullptr,
    1, // Object
    38, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    TypeInfo_Flags_None,
    //  Last type here is for padding
    L"", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1, 
    39, 0, -1, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    TypeInfo_Flags_None,
};

const UINT TypeInfoLookup[] = { 
      0,   //   0
      0,   //   1
      0,   //   2
      0,   //   3
      0,   //   4
      0,   //   5
      1,   //   6
      5,   //   7
      6,   //   8
      6,   //   9
      6,   //  10
      6,   //  11
      6,   //  12
      6,   //  13
      6,   //  14
      6,   //  15
      6,   //  16
      8,   //  17
      8,   //  18
      8,   //  19
      9,   //  20
     11,   //  21
     11,   //  22
     11,   //  23
     12,   //  24
     14,   //  25
     15,   //  26
     16,   //  27
     16,   //  28
     18,   //  29
     20,   //  30
     20,   //  31
     21,   //  32
     22,   //  33
     23,   //  34
     24,   //  35
     24,   //  36
     25,   //  37
     27,   //  38
     27,   //  39
     28,   //  40
     29,   //  41
     29,   //  42
     29,   //  43
     29,   //  44
     29,   //  45
     30,   //  46
};

struct MemberInfo 
{
    PCWSTR shortName;
    ::Platform::Object^ (*getter)(::Platform::Object^);
    void (*setter)(::Platform::Object^, ::Platform::Object^);
    int typeIndex;
    int targetTypeIndex;
    bool isReadOnly;
    bool isDependencyProperty;
    bool isAttachable;
};

const MemberInfo MemberInfos[] = 
{
    //   0 - ModelViewer.DirectXPage.ViewModel
    L"ViewModel",
    &GetReferenceTypeMember_ViewModel<::ModelViewer::DirectXPage>,
    &SetReferenceTypeMember_ViewModel<::ModelViewer::DirectXPage, ::ViewModels::DirectXPageViewModel>,
    20, // ViewModels.DirectXPageViewModel
    -1,
    false, false, false,
    //   1 - TreeViewControl.TreeView.RootNode
    L"RootNode",
    &GetReferenceTypeMember_RootNode<::TreeViewControl::TreeView>,
    nullptr,
    13, // TreeViewControl.TreeNode
    -1,
    true,  false, false,
    //   2 - TreeViewControl.TreeNode.Depth
    L"Depth",
    &GetValueTypeMember_Depth<::TreeViewControl::TreeNode, ::default::int32>,
    nullptr,
    0, // Int32
    -1,
    true,  false, false,
    //   3 - TreeViewControl.TreeNode.HasItems
    L"HasItems",
    &GetValueTypeMember_HasItems<::TreeViewControl::TreeNode, ::Platform::Boolean>,
    nullptr,
    5, // Boolean
    -1,
    true,  false, false,
    //   4 - TreeViewControl.TreeNode.IsExpanded
    L"IsExpanded",
    &GetValueTypeMember_IsExpanded<::TreeViewControl::TreeNode, ::Platform::Boolean>,
    &SetValueTypeMember_IsExpanded<::TreeViewControl::TreeNode, ::Platform::Boolean>,
    5, // Boolean
    -1,
    false, false, false,
    //   5 - TreeViewControl.TreeNode.ParentNode
    L"ParentNode",
    &GetReferenceTypeMember_ParentNode<::TreeViewControl::TreeNode>,
    &SetReferenceTypeMember_ParentNode<::TreeViewControl::TreeNode, ::TreeViewControl::TreeNode>,
    13, // TreeViewControl.TreeNode
    -1,
    false, false, false,
    //   6 - TreeViewControl.TreeNode.Data
    L"Data",
    &GetReferenceTypeMember_Data<::TreeViewControl::TreeNode>,
    &SetReferenceTypeMember_Data<::TreeViewControl::TreeNode, ::Platform::Object>,
    1, // Object
    -1,
    false, false, false,
    //   7 - TreeViewControl.TreeNode.Size
    L"Size",
    &GetValueTypeMember_Size<::TreeViewControl::TreeNode, ::default::uint32>,
    nullptr,
    3, // UInt32
    -1,
    true,  false, false,
    //   8 - ModelViewer.GraphNodeData.IsSelected
    L"IsSelected",
    &GetValueTypeMember_IsSelected<::ModelViewer::GraphNodeData, ::Platform::Boolean>,
    &SetValueTypeMember_IsSelected<::ModelViewer::GraphNodeData, ::Platform::Boolean>,
    5, // Boolean
    -1,
    false, false, false,
    //   9 - ModelViewer.GraphNodeData.IsFolder
    L"IsFolder",
    &GetValueTypeMember_IsFolder<::ModelViewer::GraphNodeData, ::Platform::Boolean>,
    &SetValueTypeMember_IsFolder<::ModelViewer::GraphNodeData, ::Platform::Boolean>,
    5, // Boolean
    -1,
    false, false, false,
    //  10 - ModelViewer.GraphNodeData.Name
    L"Name",
    &GetReferenceTypeMember_Name<::ModelViewer::GraphNodeData>,
    &SetReferenceTypeMember_Name<::ModelViewer::GraphNodeData, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //  11 - ModelViewer.GlyphConverter.ExpandedGlyph
    L"ExpandedGlyph",
    &GetReferenceTypeMember_ExpandedGlyph<::ModelViewer::GlyphConverter>,
    &SetReferenceTypeMember_ExpandedGlyph<::ModelViewer::GlyphConverter, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //  12 - ModelViewer.GlyphConverter.CollapsedGlyph
    L"CollapsedGlyph",
    &GetReferenceTypeMember_CollapsedGlyph<::ModelViewer::GlyphConverter>,
    &SetReferenceTypeMember_CollapsedGlyph<::ModelViewer::GlyphConverter, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //  13 - ViewModels.TransformViewModel.ScaleZ
    L"ScaleZ",
    &GetValueTypeMember_ScaleZ<::ViewModels::TransformViewModel, ::default::float32>,
    &SetValueTypeMember_ScaleZ<::ViewModels::TransformViewModel, ::default::float32>,
    4, // Single
    -1,
    false, false, false,
    //  14 - ViewModels.TransformViewModel.ScaleY
    L"ScaleY",
    &GetValueTypeMember_ScaleY<::ViewModels::TransformViewModel, ::default::float32>,
    &SetValueTypeMember_ScaleY<::ViewModels::TransformViewModel, ::default::float32>,
    4, // Single
    -1,
    false, false, false,
    //  15 - ViewModels.TransformViewModel.ScaleX
    L"ScaleX",
    &GetValueTypeMember_ScaleX<::ViewModels::TransformViewModel, ::default::float32>,
    &SetValueTypeMember_ScaleX<::ViewModels::TransformViewModel, ::default::float32>,
    4, // Single
    -1,
    false, false, false,
    //  16 - ViewModels.TransformViewModel.RotationZ
    L"RotationZ",
    &GetValueTypeMember_RotationZ<::ViewModels::TransformViewModel, ::default::float32>,
    &SetValueTypeMember_RotationZ<::ViewModels::TransformViewModel, ::default::float32>,
    4, // Single
    -1,
    false, false, false,
    //  17 - ViewModels.TransformViewModel.RotationY
    L"RotationY",
    &GetValueTypeMember_RotationY<::ViewModels::TransformViewModel, ::default::float32>,
    &SetValueTypeMember_RotationY<::ViewModels::TransformViewModel, ::default::float32>,
    4, // Single
    -1,
    false, false, false,
    //  18 - ViewModels.TransformViewModel.RotationX
    L"RotationX",
    &GetValueTypeMember_RotationX<::ViewModels::TransformViewModel, ::default::float32>,
    &SetValueTypeMember_RotationX<::ViewModels::TransformViewModel, ::default::float32>,
    4, // Single
    -1,
    false, false, false,
    //  19 - ViewModels.TransformViewModel.PositionZ
    L"PositionZ",
    &GetValueTypeMember_PositionZ<::ViewModels::TransformViewModel, ::default::float32>,
    &SetValueTypeMember_PositionZ<::ViewModels::TransformViewModel, ::default::float32>,
    4, // Single
    -1,
    false, false, false,
    //  20 - ViewModels.TransformViewModel.PositionY
    L"PositionY",
    &GetValueTypeMember_PositionY<::ViewModels::TransformViewModel, ::default::float32>,
    &SetValueTypeMember_PositionY<::ViewModels::TransformViewModel, ::default::float32>,
    4, // Single
    -1,
    false, false, false,
    //  21 - ViewModels.TransformViewModel.PositionX
    L"PositionX",
    &GetValueTypeMember_PositionX<::ViewModels::TransformViewModel, ::default::float32>,
    &SetValueTypeMember_PositionX<::ViewModels::TransformViewModel, ::default::float32>,
    4, // Single
    -1,
    false, false, false,
    //  22 - ViewModels.DirectXPageViewModel.SelectedTransform
    L"SelectedTransform",
    &GetReferenceTypeMember_SelectedTransform<::ViewModels::DirectXPageViewModel>,
    &SetReferenceTypeMember_SelectedTransform<::ViewModels::DirectXPageViewModel, ::ViewModels::TransformViewModel>,
    19, // ViewModels.TransformViewModel
    -1,
    false, false, false,
    //  23 - ViewModels.DirectXPageViewModel.D
    L"D",
    &GetValueTypeMember_D<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    &SetValueTypeMember_D<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    5, // Boolean
    -1,
    false, false, false,
    //  24 - ViewModels.DirectXPageViewModel.G
    L"G",
    &GetValueTypeMember_G<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    &SetValueTypeMember_G<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    5, // Boolean
    -1,
    false, false, false,
    //  25 - ViewModels.DirectXPageViewModel.F
    L"F",
    &GetValueTypeMember_F<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    &SetValueTypeMember_F<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    5, // Boolean
    -1,
    false, false, false,
    //  26 - ViewModels.DirectXPageViewModel.Specular
    L"Specular",
    &GetValueTypeMember_Specular<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    &SetValueTypeMember_Specular<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    5, // Boolean
    -1,
    false, false, false,
    //  27 - ViewModels.DirectXPageViewModel.Diffuse
    L"Diffuse",
    &GetValueTypeMember_Diffuse<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    &SetValueTypeMember_Diffuse<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    5, // Boolean
    -1,
    false, false, false,
    //  28 - ViewModels.DirectXPageViewModel.Roughness
    L"Roughness",
    &GetValueTypeMember_Roughness<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    &SetValueTypeMember_Roughness<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    5, // Boolean
    -1,
    false, false, false,
    //  29 - ViewModels.DirectXPageViewModel.Metallic
    L"Metallic",
    &GetValueTypeMember_Metallic<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    &SetValueTypeMember_Metallic<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    5, // Boolean
    -1,
    false, false, false,
    //  30 - ViewModels.DirectXPageViewModel.BaseColour
    L"BaseColour",
    &GetValueTypeMember_BaseColour<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    &SetValueTypeMember_BaseColour<::ViewModels::DirectXPageViewModel, ::Platform::Boolean>,
    5, // Boolean
    -1,
    false, false, false,
    //  31 - ViewModels.DirectXPageViewModel.LightColour
    L"LightColour",
    &GetValueTypeMember_LightColour<::ViewModels::DirectXPageViewModel, ::Windows::UI::Color>,
    &SetValueTypeMember_LightColour<::ViewModels::DirectXPageViewModel, ::Windows::UI::Color>,
    6, // Windows.UI.Color
    -1,
    false, false, false,
    //  32 - ViewModels.DirectXPageViewModel.Ibl
    L"Ibl",
    &GetValueTypeMember_Ibl<::ViewModels::DirectXPageViewModel, ::default::float32>,
    &SetValueTypeMember_Ibl<::ViewModels::DirectXPageViewModel, ::default::float32>,
    4, // Single
    -1,
    false, false, false,
    //  33 - ViewModels.DirectXPageViewModel.LightPitch
    L"LightPitch",
    &GetValueTypeMember_LightPitch<::ViewModels::DirectXPageViewModel, ::default::float32>,
    &SetValueTypeMember_LightPitch<::ViewModels::DirectXPageViewModel, ::default::float32>,
    4, // Single
    -1,
    false, false, false,
    //  34 - ViewModels.DirectXPageViewModel.LightRotation
    L"LightRotation",
    &GetValueTypeMember_LightRotation<::ViewModels::DirectXPageViewModel, ::default::float32>,
    &SetValueTypeMember_LightRotation<::ViewModels::DirectXPageViewModel, ::default::float32>,
    4, // Single
    -1,
    false, false, false,
    //  35 - ViewModels.DirectXPageViewModel.LightScale
    L"LightScale",
    &GetValueTypeMember_LightScale<::ViewModels::DirectXPageViewModel, ::default::float32>,
    &SetValueTypeMember_LightScale<::ViewModels::DirectXPageViewModel, ::default::float32>,
    4, // Single
    -1,
    false, false, false,
    //  36 - ModelViewer.DecimalPlacesConverter.DecimalPlaces
    L"DecimalPlaces",
    &GetValueTypeMember_DecimalPlaces<::ModelViewer::DecimalPlacesConverter, ::default::int32>,
    &SetValueTypeMember_DecimalPlaces<::ModelViewer::DecimalPlacesConverter, ::default::int32>,
    0, // Int32
    -1,
    false, false, false,
    //  37 - ModelViewer.BooleanToVisibilityConverter.IsInverse
    L"IsInverse",
    &GetValueTypeMember_IsInverse<::ModelViewer::BooleanToVisibilityConverter, ::Platform::Boolean>,
    &SetValueTypeMember_IsInverse<::ModelViewer::BooleanToVisibilityConverter, ::Platform::Boolean>,
    5, // Boolean
    -1,
    false, false, false,
    //  38 - TreeViewControl.IntegerToIndentationConverter.IndentMultiplier
    L"IndentMultiplier",
    &GetValueTypeMember_IndentMultiplier<::TreeViewControl::IntegerToIndentationConverter, ::default::int32>,
    &SetValueTypeMember_IndentMultiplier<::TreeViewControl::IntegerToIndentationConverter, ::default::int32>,
    0, // Int32
    -1,
    false, false, false,
};

PCWSTR GetShortName(PCWSTR longName)
{
    PCWSTR separator = wcsrchr(longName, '.');
    return separator != nullptr ? separator + 1: longName;
}

const TypeInfo* GetTypeInfo(::Platform::String^ typeName)
{
    auto typeNameLength = typeName->Length();
    if (typeNameLength < _countof(TypeInfoLookup) - 1)
    {
        for (UINT i = TypeInfoLookup[typeNameLength]; i < TypeInfoLookup[typeNameLength+1]; i++)
        {
            if (typeName == ::Platform::StringReference(TypeInfos[i].typeName))
            {
                return &TypeInfos[i];
            }
        }
    }
    return nullptr;
}

const MemberInfo* GetMemberInfo(::Platform::String^ longMemberName)
{
    auto lastDotIndex = longMemberName->Length();
    while (true)
    {
        if (longMemberName->Data()[lastDotIndex] == '.')
        {
            const TypeInfo* pTypeInfo = GetTypeInfo(ref new ::Platform::String(longMemberName->Data(), lastDotIndex));
            const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
            if (pTypeInfo)
            {
                PCWSTR shortMemberName = GetShortName(longMemberName->Data());
                for (int i = pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
                {
                    if (wcscmp(shortMemberName, MemberInfos[i].shortName) == 0)
                    {
                        return &MemberInfos[i];
                    }
                }
            }
            break;
        }
        if (lastDotIndex == 0)
        {
            break;
        }
        lastDotIndex--;
    }
    return nullptr;
}

::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        auto otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
        _otherProviders = otherProviders;
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    const TypeInfo* pTypeInfo = GetTypeInfo(typeName);
    const TypeInfo* pNextTypeInfo = pTypeInfo + 1;
    if (pTypeInfo == nullptr || pNextTypeInfo == nullptr)
    {
        return nullptr;
    }
    else if (pTypeInfo->flags & TypeInfo_Flags_IsSystemType)
    {
        return ref new ::XamlTypeInfo::InfoProvider::XamlSystemBaseType(typeName);
    }
    else
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(
            this, 
            ::Platform::StringReference(pTypeInfo->typeName), 
            this->GetXamlTypeByName(::Platform::StringReference(pTypeInfo->baseTypeIndex >= 0 ? TypeInfos[pTypeInfo->baseTypeIndex].typeName : L"")));
        userType->KindOfType = pTypeInfo->kindofType;
        userType->Activator = pTypeInfo->activator;
        userType->CollectionAdd = pTypeInfo->collectionAdd;
        userType->DictionaryAdd = pTypeInfo->dictionaryAdd;
        userType->FromStringConverter = pTypeInfo->fromStringConverter;
        userType->ContentPropertyName = ::Platform::StringReference(pTypeInfo->contentPropertyName);
        userType->IsLocalType = pTypeInfo->flags & TypeInfo_Flags_IsLocalType;
        userType->IsReturnTypeStub = pTypeInfo->flags & TypeInfo_Flags_IsReturnTypeStub;
        userType->IsBindable = pTypeInfo->flags & TypeInfo_Flags_IsBindable;
        userType->IsMarkupExtension = pTypeInfo->flags & TypeInfo_Flags_IsMarkupExtension;
        userType->CreateFromStringMethod = nullptr;
        int nextMemberIndex = pTypeInfo->firstMemberIndex;
        for (int i=pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
        {
            userType->AddMemberName(::Platform::StringReference(MemberInfos[i].shortName));
            nextMemberIndex++;
        }
        return userType;
    }
}

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = nullptr;
    const MemberInfo* pMemberInfo = GetMemberInfo(longMemberName);
    if (pMemberInfo != nullptr)
    {
        xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(
            this,
            ::Platform::StringReference(pMemberInfo->shortName),
            ::Platform::StringReference(TypeInfos[pMemberInfo->typeIndex].typeName));
        xamlMember->Getter = pMemberInfo->getter;
        xamlMember->Setter = pMemberInfo->setter;
        xamlMember->TargetTypeName = pMemberInfo->targetTypeIndex >= 0 ? ::Platform::StringReference(TypeInfos[pMemberInfo->targetTypeIndex].typeName) : L"";
        xamlMember->IsReadOnly = pMemberInfo->isReadOnly;
        xamlMember->IsDependencyProperty = pMemberInfo->isDependencyProperty;
        xamlMember->IsAttachable = pMemberInfo->isAttachable;
    }
    return xamlMember;
}

